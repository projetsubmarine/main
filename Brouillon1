
from random import randint
dico = {}
'''def dict_submarine_generator(dict_submarine, nb_submarine, submarine_life):
    for element in range(nb_submarine):
        x = randint(0,4)
        y = randint(0,4)
        dico["submarine"+str(element + 1)] = {'health' : submarine_life, 'position': [x,y]}
    return dict_submarine'''

from random import randint

 dico = {​​​​}​​​​

 def dict_submarine_generator(dict_submarine, nb_submarine, submarine_life):

     for element in range(nb_submarine):

         x = randint(0,4)

         y = randint(0,4)

         dico["submarine"+str(element + 1)] = {​​​​'health' : submarine_life, 'position': [x,y]}​​​​

     return dict_submarine

 print(dict_submarine_generator(dico, 4, 2))


for element in range(2):
    list_sonar = dict_submarine['submarine%s' % str(element)]['position']
    print(list_sonar)
    list_sonar = 'list_sonar' + str(element)
    
_______________________________________________________________________________________________________________



def move_possible(current_position, direction):

    if  direction == 0:
        current_position = current_position 
       # current_position[0]  => [x]
    elif direction == 1 and current_position[1] >= 0:

        current_position[1] = int(current_position[1])  - 1
    elif direction == 2 and current_position[1] <= 4:
        
        current_position[1] =  int(current_position[1])  + 1
    elif direction == 3 and current_position[0] <= 4:
        
        current_position[0] = int(current_position[0])  + 1
    elif direction == 4 and current_position[0] >= 0:
        
        current_position[0] = int(current_position[0])  - 1
    
    return current_position
    #This function needs to be assigned to a variable or nested in a nother then we dont need the return
    

last_movement = 1


for element in range(4): #here 4 is going to be replaced with the nb of remaining submarines that are alive
    '''This is the function to set limits and make one mouvement,
    for the direction generator the following applies:
    0 is stay in place
    1 is up
    2 is down
    3 is right
    4 is left
'''

    sub_name = 'submarine%s' % str(element)

    print(sub_name)
    list_position = list(dico[sub_name]['position'])
    print(list_position)
    
    chance_move_freeze = randint(0, 1)
    print(chance_move_freeze)
    chance_direction_change = randint(0, 9)
    print(chance_direction_change)

    if chance_move_freeze == 1:
        
        #for bottom right corner
        if int(list_position[0]) == 4 and int(list_position[1]) == 4:
            '''0 stay in place
            1 is up 
            4 is left

            '''
            if chance_direction_change != 5 and last_movement not in [2,3]:
                direction_generator = last_movement
                move_possible(list_position, direction_generator)
            else:
                direction_generator = randint(0, 2)
                direction = [0, 1, 4]
                move_possible(list_position, direction[direction_generator])
        #for bttom left corner
        elif int(list_position[0]) == 0 and int(list_position[1]) == 4:
            '''0 stay in place
            1 is up
            3 is right

            '''
            if chance_direction_change != 5 and last_movement not in [2,4]:
                direction_generator = last_movement
                move_possible(list_position, direction_generator)
            else:
                direction_generator = randint(0, 2)
                direction = [0, 1, 3]
                move_possible(list_position, direction[direction_generator])
        #for top left
        elif int(list_position[0]) == 0 and int(list_position[1]) == 0:
            '''0 stay in place
            2 is down
            3 is right

            '''
            if chance_direction_change != 5 and last_movement not in [1,4]:
                direction_generator = last_movement
                move_possible(list_position, direction_generator)
            else:
                direction_generator = randint(0, 2)
                direction = [0, 2, 3]
                move_possible(list_position, direction[direction_generator])
        #for top right
        elif int(list_position[0]) == 4 and int(list_position[1]) == 0:
            '''0 stay in place
            2 is down
            4 is left

            '''
            if chance_direction_change != 5 and last_movement not in [1,3]:
                direction_generator = last_movement
                move_possible(list_position, direction_generator)
            else:
                direction_generator = randint(0, 2)
                direction = [0, 2, 4]
                move_possible(list_position, direction[direction_generator])
        #top boundary with everything available but up
        elif (0 < int(list_position[0]) < 4) and int(list_position[1]) == 0:
            '''0 stay in place
            2 is down
            3 is right
            4 is left

            '''
            if chance_direction_change != 5 and last_movement not in [1]:
                direction_generator = last_movement
                move_possible(list_position, direction_generator)
            else:
                direction_generator = randint(0, 3)
                direction = [0, 2, 3, 4]
                move_possible(list_position, direction[direction_generator])
        #bottom boundary with everything but down
        elif (0 < int(list_position[0]) < 4) and int(list_position[1]) == 4:
            '''0 stay in place
            1 is up
            3 is right
            4 is left

            '''
            if chance_direction_change != 5 and last_movement not in [2]:
                direction_generator = last_movement
                move_possible(list_position, direction_generator)
            else:      
                direction_generator = randint(0, 3)
                direction = [0, 1, 3, 4]
                move_possible(list_position, direction[direction_generator])
        #left side boundary with everything but left 
        elif (0 < int(list_position[1]) < 4) and int(list_position[0]) == 0:
            '''0 stay in place
            1 is up
            2 is down
            3 is right

            '''
            if chance_direction_change != 5 and last_movement not in [4]:
                direction_generator = last_movement
                move_possible(list_position, direction_generator)
            else:
                direction_generator = randint(0, 3)
                direction = [0, 1, 2, 3]
                move_possible(list_position, direction[direction_generator])
        #right side boundary with everything but right
        elif (0 < int(list_position[1]) < 4) and int(list_position[0]) == 0:
            '''0 stay in place
            1 is up
            2 is down
            4 is left

            '''
            if chance_direction_change != 5 and last_movement not in [3]:
                direction_generator = last_movement
                move_possible(list_position, direction_generator)
            else:
                direction_generator = randint(0, 3)
                direction = [0, 1, 2, 4]
                move_possible(list_position, direction[direction_generator])

        #for everything in the center not on boundary
        else:

            direction_generator = randint(0, 4)

            
            print(direction_generator)

            if chance_direction_change == 5:
                move_possible(list_position, direction_generator)
                #this code contains all the updates to the positions possible but requires a final return and an update to the dictonary
                last_movement = direction_generator
            else:
                # il faudra rajouter dernier mouvement dans le dict
                move_possible(list_position, last_movement)   
                #last move doesnt change 
                last_movement = last_movement
    #doesnt move 
    else:
        print('you have stayed in place')
        last_movement = last_movement
        #movemen
        #nothing because the position stays the sam
        list_sonar = 'list_sonar' + str(element)
    print(list_position)



-------------------------------------------------------------------------------------------------------
from random import randint

dico = {}


def dict_submarine_generator(dict_submarine, nb_submarine, submarine_life):
    for element in range(nb_submarine):
        x = randint(0,4)
        y = randint(0,4)
        dict_submarine["submarine"+str(element)] = {"health" : submarine_life, "position": [x,y]}
    return dico




for element in range(4):
    list_sonar = dico['submarine%s' % str(element)]['position']
    print(list_sonar)
    list_sonar = 'list_sonar' + str(element)


def move_possible(current_position, direction):

    if  direction == 0:
        current_position = current_position 
       # current_position[0]  => [x]
    elif direction == 1 and current_position[1] >= 0:

        current_position[1] = int(current_position[1])  - 1
    elif direction == 2 and current_position[1] <= 4:
        
        current_position[1] =  int(current_position[1])  + 1
    elif direction == 3 and current_position[0] <= 4:
        
        current_position[0] = int(current_position[0])  + 1
    elif direction == 4 and current_position[0] >= 0:
        
        current_position[0] = int(current_position[0])  - 1
    
    return current_position
    #This function needs to be assigned to a variable or nested in a nother then we dont need the return
    

last_movement = 1


for element in range(4): #here 4 is going to be replaced with the nb of remaining submarines that are alive
    '''This is the function to set limits and make one mouvement,
    for the direction generator the following applies:
    0 is stay in place
    1 is up
    2 is down
    3 is right
    4 is left
    '''

    sub_name = 'submarine%s' % str(element)

    print(sub_name)
    list_position = list(dico[sub_name]['position'])
    print(list_position)
    
    chance_move_freeze = randint(0, 1)
    print(chance_move_freeze)
    chance_direction_change = randint(0, 9)
    print(chance_direction_change)

    if chance_move_freeze == 1:
        
        #for bottom right corner
        if int(list_position[0]) == 4 and int(list_position[1]) == 4:
            '''0 stay in place
            1 is up 
            4 is left

            '''
            if chance_direction_change != 5 and last_movement not in [2,3]:
                direction_generator = last_movement
                move_possible(list_position, direction_generator)
            else:
                direction_generator = randint(0, 2)
                direction = [0, 1, 4]
                move_possible(list_position, direction[direction_generator])
        #for bttom left corner
        elif int(list_position[0]) == 0 and int(list_position[1]) == 4:
            '''0 stay in place
            1 is up
            3 is right

            '''
            if chance_direction_change != 5 and last_movement not in [2,4]:
                direction_generator = last_movement
                move_possible(list_position, direction_generator)
            else:
                direction_generator = randint(0, 2)
                direction = [0, 1, 3]
                move_possible(list_position, direction[direction_generator])
        #for top left
        elif int(list_position[0]) == 0 and int(list_position[1]) == 0:
            '''0 stay in place
            2 is down
            3 is right

            '''
            if chance_direction_change != 5 and last_movement not in [1,4]:
                direction_generator = last_movement
                move_possible(list_position, direction_generator)
            else:
                direction_generator = randint(0, 2)
                direction = [0, 2, 3]
                move_possible(list_position, direction[direction_generator])
        #for top right
        elif int(list_position[0]) == 4 and int(list_position[1]) == 0:
            '''0 stay in place
            2 is down
            4 is left

            '''
            if chance_direction_change != 5 and last_movement not in [1,3]:
                direction_generator = last_movement
                move_possible(list_position, direction_generator)
            else:
                direction_generator = randint(0, 2)
                direction = [0, 2, 4]
                move_possible(list_position, direction[direction_generator])
        #top boundary with everything available but up
        elif (0 < int(list_position[0]) < 4) and int(list_position[1]) == 0:
            '''0 stay in place
            2 is down
            3 is right
            4 is left

            '''
            if chance_direction_change != 5 and last_movement not in [1]:
                direction_generator = last_movement
                move_possible(list_position, direction_generator)
            else:
                direction_generator = randint(0, 3)
                direction = [0, 2, 3, 4]
                move_possible(list_position, direction[direction_generator])
        #bottom boundary with everything but down
        elif (0 < int(list_position[0]) < 4) and int(list_position[1]) == 4:
            '''0 stay in place
            1 is up
            3 is right
            4 is left

            '''
            if chance_direction_change != 5 and last_movement not in [2]:
                direction_generator = last_movement
                move_possible(list_position, direction_generator)
            else:      
                direction_generator = randint(0, 3)
                direction = [0, 1, 3, 4]
                move_possible(list_position, direction[direction_generator])
        #left side boundary with everything but left 
        elif (0 < int(list_position[1]) < 4) and int(list_position[0]) == 0:
            '''0 stay in place
            1 is up
            2 is down
            3 is right

            '''
            if chance_direction_change != 5 and last_movement not in [4]:
                direction_generator = last_movement
                move_possible(list_position, direction_generator)
            else:
                direction_generator = randint(0, 3)
                direction = [0, 1, 2, 3]
                move_possible(list_position, direction[direction_generator])
        #right side boundary with everything but right
        elif (0 < int(list_position[1]) < 4) and int(list_position[0]) == 0:
            '''0 stay in place
            1 is up
            2 is down
            4 is left

            '''
            if chance_direction_change != 5 and last_movement not in [3]:
                direction_generator = last_movement
                move_possible(list_position, direction_generator)
            else:
                direction_generator = randint(0, 3)
                direction = [0, 1, 2, 4]
                move_possible(list_position, direction[direction_generator])

        #for everything in the center not on boundary
        else:

            direction_generator = randint(0, 4)

            
            print(direction_generator)

            if chance_direction_change == 5:
                move_possible(list_position, direction_generator)
                #this code contains all the updates to the positions possible but requires a final return and an update to the dictonary
                last_movement = direction_generator
            else:
                # il faudra rajouter dernier mouvement dans le dict
                move_possible(list_position, last_movement)   
                #last move doesnt change 
                last_movement = last_movement
        
        
    
    #doesnt move 
    else:
        print('you have stayed in place')
        last_movement = last_movement
        #movemen
        #nothing because the position stays the sam
        list_sonar = 'list_sonar' + str(element)
    dico[sub_name]['position'] = list_position
    print(list_position)

print(dico['submarine2']['position'])


__________________________________________________

viseur
_________

from microbit import *
    
while True: 
    target_x = 2
    target_y = 2 
    
    while True:
        if accelerometer.get_x()> 250:
          target_x = target_x + 1
          display.clear()
          sleep(300)
        if accelerometer.get_x()< -250:
          target_x = target_x - 1
          display.clear()
          sleep(300)
        if accelerometer.get_y()> 250:
          target_y = target_y + 1
          display.clear()
          sleep(300)
        if accelerometer.get_y()< -250:
          target_y = target_y - 1
          display.clear()
          sleep(300)
        display.set_pixel(target_x,target_y,9)








    






    

    



    


